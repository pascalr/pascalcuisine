import * as assert from 'assert/strict'

import {analyzeCode} from '../src/compiler.js'

def analyzeCodeGetBinding(code, bindingName)
  let ctxFile = analyzeCode(code)
  return ctxFile.lexEnv.getBinding(bindingName)
end

describe "Incomplete statements" do
  it 'should return an error keyword let with nothing else' do
    let ctxFile = analyzeCode(`let`)
    assert.equal(ctxFile.errors.length, 1)
  end
  it 'should return an error keyword import with nothing else' do
    let ctxFile = analyzeCode(`import`)
    assert.equal(ctxFile.errors.length, 1)
  end
end





describe "Declaration should add to the lexical environment" do
  it 'let should add to the lexical environment' do
    assert(analyzeCodeGetBinding(`let x`, 'x'))
  end
  it 'import should add to the lexical environment' do
    assert(analyzeCodeGetBinding(`import name from 'file'`, 'name'))
  end
  it 'def should add to the lexical environment' do
    assert(analyzeCodeGetBinding(`def add(x, y) return x + y end`, 'add'))
  end
end





// TODO: Test that the bindings have the good variableType when specified
// int x
// let x : int
// let x = 43
// All of these should set the variable type int to the binding x

describe "The bindings should have the good variableType when specified" do
  it 'int x' do
    let binding = analyzeCodeGetBinding(`int x`, 'x')
    assert.equal(binding.variableType, 'int')
  end
  it 'let x : int' do
    let binding = analyzeCodeGetBinding(`let x : int`, 'x')
    assert.equal(binding.variableType, 'int')
  end
end

describe "The bindings should have the good variableType implicitely detected when possible" do
  it 'let x = 43' do
    let binding = analyzeCodeGetBinding(`let x = 43`, 'x')
    assert.equal(binding.variableType, 'int')
  end
  it 'let x = true' do
    let binding = analyzeCodeGetBinding(`let x = true`, 'x')
    assert.equal(binding.variableType, 'bool')
  end
  it 'let x = 2.0' do
    let binding = analyzeCodeGetBinding(`let x = 2.0`, 'x')
    assert.equal(binding.variableType, 'float')
  end
  it 'let x = "hello"' do
    let binding = analyzeCodeGetBinding(`let x = "hello"`, 'x')
    assert.equal(binding.variableType, 'string')
  end
end



