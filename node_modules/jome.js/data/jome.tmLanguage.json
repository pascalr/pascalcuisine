{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Jome",
  "scopeName": "source.jome",
  "fileTypes": [
    ".jome",
    ".jomm",
    ".jomn"
  ],
  "patterns": [
    {
      "include": "#statement"
    },
    {
      "include": "#expression"
    }
  ],
  "repository": {
    "import-identifier": {
      "patterns": [
        {
          "match": "&[A-Za-z_$]\\w*",
          "name": "CLASS_REFERENCE"
        },
        {
          "include": "#variable"
        }
      ]
    },
    "statement": {
      "patterns": [
        {
          "begin": "^(###)(\r\n|\n|$)",
          "end": "^(###)(\r\n|\n|$)",
          "patterns": [
            {
              "include": "text.html.markdown"
            }
          ],
          "name": "MD_CELL"
        },
        {
          "begin": "^(import) ?(&?[A-Za-z_$][A-Za-z0-9_]*)?",
          "beginCaptures": {
            "2": {
              "patterns": [
                {
                  "include": "#import-identifier"
                }
              ],
              "name": "DEFAULT_IMPORT"
            }
          },
          "end": "\r\n|\n|$",
          "patterns": [
            {
              "match": "\\s+"
            },
            {
              "match": "(\\*) (as) (&?[A-Za-z_$][A-Za-z0-9_]*)",
              "captures": {
                "3": {
                  "patterns": [
                    {
                      "include": "#import-identifier"
                    }
                  ],
                  "name": "NAMESPACE_IMPORT"
                }
              }
            },
            {
              "match": "(from|\\:|of) (\"[^\"]*\"|'[^']*')",
              "captures": {
                "1": {
                  "name": "IMPORT_STYLE"
                },
                "2": {
                  "name": "IMPORT_FILE"
                }
              }
            },
            {
              "begin": "\\{",
              "end": "\\}",
              "patterns": [
                {
                  "match": "(&?[A-Za-z_$][A-Za-z0-9_]*) (as) ([A-Za-z_$][A-Za-z0-9_]*)",
                  "captures": {
                    "1": {
                      "patterns": [
                        {
                          "include": "#import-identifier"
                        }
                      ]
                    },
                    "3": {
                      "name": "VARIABLE"
                    }
                  },
                  "name": "ALIAS_IMPORT"
                },
                {
                  "match": "(\"[^\"]*\"|'[^']*') (as) ([A-Za-z_$][A-Za-z0-9_]*)",
                  "captures": {
                    "1": {
                      "name": "STRING"
                    },
                    "3": {
                      "name": "VARIABLE"
                    }
                  },
                  "name": "ALIAS_IMPORT"
                },
                {
                  "match": "&?[A-Za-z_$][A-Za-z0-9_]*",
                  "patterns": [
                    {
                      "include": "#import-identifier"
                    }
                  ],
                  "name": "NAMED_IMPORT"
                },
                {
                  "include": "#comma"
                },
                {
                  "include": "#block-comment"
                }
              ]
            }
          ],
          "name": "IMPORT"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#if_block"
        },
        {
          "include": "#interface"
        },
        {
          "include": "#class"
        },
        {
          "include": "#symbols"
        },
        {
          "include": "#format"
        },
        {
          "include": "#function"
        },
        {
          "include": "#do_end"
        },
        {
          "include": "#trycatch"
        },
        {
          "include": "#for-tag"
        },
        {
          "include": "#chain-bloc"
        },
        {
          "include": "#type_def"
        },
        {
          "include": "#regex"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#with-args"
        },
        {
          "include": "#vbars-args"
        },
        {
          "include": "#def"
        },
        {
          "include": "#paren-expression"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#scripts"
        },
        {
          "include": "#tag"
        },
        {
          "include": "#arrow"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#declaration"
        },
        {
          "include": "#function_call"
        },
        {
          "include": "#caller"
        },
        {
          "include": "#state-var"
        },
        {
          "include": "#getter"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#attribute"
        },
        {
          "include": "#square-bracket"
        },
        {
          "include": "#inline-utility"
        },
        {
          "include": "#utilities"
        },
        {
          "include": "#support-items"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#block-array"
        },
        {
          "include": "#code_block"
        },
        {
          "include": "#block"
        },
        {
          "include": "#semicolon"
        },
        {
          "include": "#comma"
        }
      ]
    },
    "support-items": {
      "patterns": [
        {
          "name": "VARIABLE",
          "match": "\\b(console|window|global|document|__dirname|__filename|JSON)\\b"
        },
        {
          "name": "VARIABLE",
          "match": "\\b(Array|Error)\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.inline-conditional.jome",
          "match": "\\b(if|si)\\b"
        },
        {
          "name": "keyword.control.main.jome",
          "match": "\\b(main)\\b"
        },
        {
          "name": "keyword.control.return.jome",
          "match": "\\b(return)\\b"
        },
        {
          "name": "keyword.control.throw.jome",
          "match": "\\b(throw)\\b"
        },
        {
          "name": "keyword.operator.new.jome",
          "match": "\\b(new)\\b"
        },
        {
          "name": "keyword.control.trycatch.jome",
          "match": "\\b(try|catch|finally)\\b"
        },
        {
          "name": "keyword.control.flow.jome",
          "match": "\\b(await)\\b"
        },
        {
          "name": "storage.modifier.async.jome",
          "match": "\\b(async)\\b"
        },
        {
          "name": "keyword.control.jome",
          "match": "\\b(yield|while|for|return|include|from|import|ret|retn|export|await|async|default|interface)\\b"
        },
        {
          "name": "keyword.operator.typeof.jome",
          "match": "\\b(typeof)\\b"
        },
        {
          "name": "keyword.other.debugger.jome",
          "match": "\\b(debugger)\\b"
        }
      ]
    },
    "comma": {
      "match": ",",
      "name": "punctuation.separator.delimiter.jome"
    },
    "semicolon": {
      "match": ";",
      "name": "punctuation.terminator.statement.jome"
    },
    "symbols": {
      "patterns": [
        {
          "match": ":[A-Za-z_$][A-Za-z0-9_]*\\!",
          "name": "SYMBOL_TRUE"
        },
        {
          "match": ":([A-Za-z_$][A-Za-z0-9_]*)",
          "name": "SYMBOL"
        }
      ]
    },
    "arrow": {
      "name": "keyword.arrow.jome",
      "match": "=>| -> "
    },
    "vbars-args": {
      "begin": "\\|(?!\\|)",
      "end": "\\|",
      "patterns": [
        {
          "include": "#argument_v2"
        },
        {
          "include": "#along"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "with-args": {
      "name": "meta.with-args.jome",
      "begin": "with",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.jome"
        }
      },
      "end": "\\b(end|(?=def)|(?=class)|(?=main)|(?=export))\\b",
      "endCaptures": {
        "0": {
          "name": "keyword.control.jome"
        }
      },
      "patterns": [
        {
          "include": "#argument"
        },
        {
          "include": "#along"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "paren-args": {
      "begin": "\\G\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#argument_v2"
        },
        {
          "include": "#along"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "declaration": {
      "patterns": [
        {
          "match": "(\\b(?:int|string|bool|float)\\b(?:\\[\\])*)\\s+([A-Za-z_$][A-Za-z0-9_]*)",
          "captures": {
            "1": {
              "name": "TYPE"
            },
            "2": {
              "name": "VARIABLE"
            }
          },
          "name": "DECLARATION"
        },
        {
          "match": "\\b(let|var|const)\\b\\s*([A-Za-z_$][A-Za-z0-9_]*)?(?:\\s*(\\:)\\s*(\\b(?:int|string|bool|float)\\b(?:\\[\\])*))",
          "captures": {
            "1": {
              "name": "KEYWORD_DECLARATION"
            },
            "2": {
              "name": "VARIABLE"
            },
            "4": {
              "name": "TYPE"
            }
          },
          "name": "DECLARATION"
        },
        {
          "match": "\\b(let|var|const)\\b\\s*([A-Za-z_$][A-Za-z0-9_]*)?(?:\\s*(\\:)\\s*([A-Za-z_$]\\w*(?:\\<\\w+\\>)?(?:\\[\\])*))?",
          "captures": {
            "1": {
              "name": "KEYWORD_DECLARATION"
            },
            "2": {
              "name": "VARIABLE"
            },
            "4": {
              "name": "TYPE"
            }
          },
          "name": "DECLARATION"
        },
        {
          "match": "([A-Za-z_$]\\w*(?:\\<\\w+\\>)?(?:\\[\\])*)\\s+(?!\\b(?:chain|do)\\b)([A-Za-z_$][A-Za-z0-9_]*)\\s*(?=\n|;)",
          "captures": {
            "1": {
              "name": "TYPE"
            },
            "2": {
              "name": "VARIABLE"
            }
          },
          "name": "DECLARATION"
        }
      ]
    },
    "def": {
      "begin": "\\b(def)\\s*([A-Za-z_$][A-Za-z0-9_]*)?\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "FUNCTION_STYLE"
        },
        "2": {
          "name": "FUNCTION_NAME"
        }
      },
      "end": "(\\bend\\b)|((?<!\\s)\\:\\s)",
      "endCaptures": {
        "2": {
          "name": "BEGIN_SECTION"
        }
      },
      "patterns": [
        {
          "include": "#paren-args"
        },
        {
          "include": "#expression"
        }
      ],
      "name": "FUNCTION"
    },
    "chain-bloc": {
      "name": "meta.chain.jome",
      "begin": "\\b(chain)\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.jome"
        }
      },
      "end": "\\b(end)\\b",
      "endCaptures": {
        "1": {
          "name": "keyword.control.jome"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "do_end": {
      "begin": "\\b(do)\\b\\s*",
      "end": "\\b(end)\\b",
      "patterns": [
        {
          "include": "#vbars-args"
        },
        {
          "include": "#expression"
        }
      ],
      "name": "DO_END"
    },
    "function": {
      "begin": "\\b(function|fn)\\b\\s*([A-Za-z_$][A-Za-z0-9_]*(?=\\())?\\s*",
      "beginCaptures": {
        "1": {
          "name": "FUNCTION_STYLE"
        },
        "2": {
          "name": "FUNCTION_NAME"
        }
      },
      "end": "(\\bend\\b)|(?:(?<=\\))(?=\\s*\\{))",
      "patterns": [
        {
          "include": "#paren-args"
        },
        {
          "include": "#expression"
        }
      ],
      "name": "FUNCTION"
    },
    "if_block": {
      "patterns": [
        {
          "begin": "(?:^|\\G)\\s*\\b(if)\\b",
          "end": "(\\bend\\b)|((?<!\\s)\\:\\s)|(?=(?:\\belse\\b))|(?=(?:\\belif\\b))|(?=(?:\\belsif\\b))",
          "endCaptures": {
            "2": {
              "name": "BEGIN_SECTION"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "IF_BLOCK"
        },
        {
          "begin": "\\b((else if)|(elsif)|(elif))\\b",
          "end": "(\\bend\\b)|((?<!\\s)\\:\\s)|(?=(?:\\belse\\b))|(?=(?:\\belif\\b))|(?=(?:\\belsif\\b))",
          "endCaptures": {
            "2": {
              "name": "BEGIN_SECTION"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "ELSIF_BLOCK"
        },
        {
          "begin": "\\b(else)\\b",
          "end": "(\\bend\\b)|((?<!\\s)\\:\\s)",
          "endCaptures": {
            "2": {
              "name": "BEGIN_SECTION"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "ELSE_BLOCK"
        }
      ]
    },
    "trycatch": {
      "patterns": [
        {
          "name": "meta.try-block.jome",
          "begin": "\\b(try)\\b\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.trycatch.jome"
            }
          },
          "end": "\\}(?!\\s*catch)(?!\\s*finally)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.catch.jome",
          "begin": "\\b(catch)\\b\\s*(?:\\(\\s*([A-Za-z_$][A-Za-z0-9_]*)\\)\\s*)?\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.trycatch.jome"
            },
            "2": {
              "name": "variable.other.exception.jome"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.finally.jome",
          "begin": "\\b(finally)\\b\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.trycatch.jome"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.trycatch.jome",
          "begin": "\\b(try)\\b",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.trycatch.jome"
            }
          },
          "end": "\\b(end)\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.jome"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "type_def": {
      "patterns": [
        {
          "name": "meta.type_def.jome",
          "match": "\\b(type)\\b\\s*(\\w*)\\s*=\\s*((\\s*[\\|\\&]?\\w*)*)",
          "captures": {
            "1": {
              "name": "keyword.control.jome"
            },
            "2": {
              "name": "TYPE"
            },
            "3": {
              "patterns": [
                {
                  "match": "\\w+",
                  "name": "TYPE"
                }
              ]
            }
          }
        },
        {
          "name": "meta.type_def.jome",
          "begin": "\\b(type)\\b(\\w*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.jome"
            },
            "2": {
              "name": "TYPE"
            }
          },
          "end": "\\b(end)\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.jome"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "class": {
      "patterns": [
        {
          "name": "meta.class.jome",
          "begin": "\\b(class)\\b\\s*([A-Za-z_$]\\w*)?\\s*(\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.jome"
            },
            "2": {
              "name": "entity.name.type.class.jome"
            },
            "3": {
              "name": "punctuation.definition.block.begin.jome"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.block.end.jome"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.class.jome",
          "begin": "\\b(class)\\b\\s*([A-Za-z_$]\\w*)?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.jome"
            },
            "2": {
              "name": "entity.name.type.class.jome"
            }
          },
          "end": "\\b(end)\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.jome"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "interface": {
      "name": "meta.interface.jome",
      "begin": "\\b(interface)\\b\\s*([a-zA-Z_]\\w*)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.jome"
        },
        "2": {
          "name": "entity.name.type.interface.jome"
        }
      },
      "end": "\\b(end)\\b",
      "endCaptures": {
        "0": {
          "name": "keyword.control.jome"
        }
      },
      "patterns": [
        {
          "include": "#argument"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "function_call": {
      "patterns": [
        {
          "begin": "(\\.)(\\w+)\\(",
          "beginCaptures": {
            "2": {
              "name": "FUNCTION_NAME"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "INLINE_FUNCTION_CALL"
        },
        {
          "begin": "(\\.)(#\\w+\\!?)\\(",
          "beginCaptures": {
            "2": {
              "name": "BUILT_IN"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "INLINE_FUNCTION_CALL"
        },
        {
          "begin": "(\\.)(#\\w+\\b\\!?)(?!\\:)(?!\\s*([\\+\\-\\*\\/\\|\\^\\=\\,\\.]|\\)|&&|\\!=|\\!==|$|%|;|along|chain|end|\\}|\\?|\\[|\\]))",
          "beginCaptures": {
            "2": {
              "name": "BUILT_IN"
            }
          },
          "end": "\r\n|\n|$|chain",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "INLINE_FUNCTION_CALL"
        },
        {
          "begin": "(\\.)\\b(\\w+)\\b(?!\\:)(?!\\s*([\\+\\-\\*\\/\\|\\^\\=\\,\\.]|\\)|&&|\\!=|\\!==|$|%|;|along|chain|end|\\}|\\?|\\[|\\]))",
          "beginCaptures": {
            "2": {
              "name": "FUNCTION_NAME"
            }
          },
          "end": "\r\n|\n|$|chain",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "INLINE_FUNCTION_CALL"
        },
        {
          "begin": "(\\w+)\\(",
          "beginCaptures": {
            "1": {
              "name": "FUNCTION_NAME"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "FUNCTION_CALL"
        },
        {
          "begin": "(#\\w+\\!?)\\(",
          "beginCaptures": {
            "1": {
              "name": "BUILT_IN"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "FUNCTION_CALL"
        },
        {
          "begin": "(#\\w+\\b\\!?)(?!\\:)(?!\\s*([\\+\\-\\*\\/\\|\\^\\=\\,\\.]|\\)|&&|\\!=|\\!==|$|%|;|along|chain|end|\\}|\\?|\\[|\\]))",
          "beginCaptures": {
            "1": {
              "name": "BUILT_IN"
            }
          },
          "end": "\r\n|\n|$|chain",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "FUNCTION_CALL"
        },
        {
          "begin": "\\b(\\w+)\\b(?!\\:)(?!\\s*([\\+\\-\\*\\/\\|\\^\\=\\,\\.]|\\)|&&|\\!=|\\!==|$|%|;|along|chain|end|\\}|\\?|\\[|\\]))",
          "beginCaptures": {
            "1": {
              "name": "FUNCTION_NAME"
            }
          },
          "end": "\r\n|\n|$|chain",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "FUNCTION_CALL"
        }
      ]
    },
    "argument_v2": {
      "patterns": [
        {
          "match": "([A-Za-z_$][A-Za-z0-9_]*)\\s*(:)\\s*([A-Za-z]\\w*)",
          "captures": {
            "1": {
              "name": "NAME"
            },
            "3": {
              "name": "TYPE"
            }
          },
          "name": "ARGUMENT"
        },
        {
          "match": "[A-Za-z_$][A-Za-z0-9_]*",
          "name": "ARGUMENT"
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#argument_v2"
            },
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "argument": {
      "patterns": [
        {
          "match": "([A-Za-z_$][A-Za-z0-9_]*)\\s*(:)\\s*([A-Za-z]\\w*)",
          "captures": {
            "1": {
              "name": "ARGUMENT"
            },
            "2": {
              "name": "keyword.operator.type.annotation.jome"
            },
            "3": {
              "name": "TYPE"
            }
          }
        },
        {
          "match": "[A-Za-z_$][A-Za-z0-9_]*",
          "name": "ARGUMENT"
        },
        {
          "name": "meta.deconstructed-arg.jome",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.curly-braces.open.jome"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.curly-braces.close.jome"
            }
          },
          "patterns": [
            {
              "include": "#argument"
            },
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "variable": {
      "match": "[A-Za-z_$][A-Za-z0-9_]*",
      "name": "VARIABLE"
    },
    "caller": {
      "name": "meta.caller.jome",
      "match": "(->)(\\w+)",
      "captures": {
        "1": {
          "name": "punctuation.arrow.jome"
        },
        "2": {
          "name": "entity.name.function.jome"
        }
      }
    },
    "getter": {
      "patterns": [
        {
          "name": "meta.getter.jome",
          "match": "(\\?\\.)(\\w+)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.optional.jome"
            },
            "2": {
              "name": "variable.other.property.jome"
            }
          }
        },
        {
          "name": "meta.getter.jome",
          "match": "(\\.)(\\w+)",
          "captures": {
            "1": {
              "name": "punctuation.dot.jome"
            },
            "2": {
              "name": "variable.other.property.jome"
            }
          }
        },
        {
          "name": "meta.getter.jome",
          "begin": "(\\?\\.)(\\[)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.accessor.optional.jome"
            },
            "2": {
              "name": "punctuation.definition.square-bracket.begin.jome"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.square-bracket.end.jome"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "inline-utility": {
      "name": "entity.name.function.utility-inline.jome",
      "match": "\\.#\\w+\\!?"
    },
    "utilities": {
      "patterns": [
        {
          "name": "meta.include.jome",
          "begin": "(#\\.\\.\\.)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.include.jome"
            },
            "2": {
              "name": "punctuation.paren.open.jome"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.paren.close.jome"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "meta.require.jome",
          "begin": "(#)(\\()",
          "beginCaptures": {
            "1": {
              "name": "support.function.include.jome"
            },
            "2": {
              "name": "punctuation.paren.open.jome"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.paren.close.jome"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "name": "string.other.path.jome",
          "match": "(#\\.{0,2}/[^ \\(\\)\\,]*)|(#cwd/[^ \\(\\)\\,]*)|(#\\.{1,2})"
        },
        {
          "name": "variable.other.constant.utility.jome",
          "match": "#\\b(PI|env|cwd|argv)\\b",
          "notWorkingMatch": "#\\b\\w+\\b(?!\\(|#)"
        },
        {
          "name": "support.function.builtin.jome",
          "match": "#\\w+\\!?"
        }
      ]
    },
    "along": {
      "match": "(along)\\s*(type|unit|code|source)",
      "captures": {
        "1": {
          "name": "keyword.control.along.jome"
        },
        "2": {
          "name": "variable.language.jome"
        }
      }
    },
    "state-var": {
      "name": "variable.other.state-var.jome",
      "match": "%\\w+"
    },
    "attribute": {
      "patterns": [
        {
          "name": "support.type.property-name.attribute.optional.jome",
          "match": "\\@\\w+\\?"
        },
        {
          "name": "support.type.property-name.attribute.required.jome",
          "match": "\\@\\w+\\!"
        },
        {
          "name": "support.type.property-name.attribute.jome",
          "match": "\\@\\w*"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "([a-zA-Z_]\\w*)?\\s*(\\+=|-=|\\*=|&&=|\\|\\|=|(?<!\\()/=)",
          "captures": {
            "1": {
              "name": "variable.assignment.jome"
            },
            "2": {
              "name": "keyword.operator.assignment.compound.jome"
            }
          }
        },
        {
          "match": "!==|!=|<=|>=|===|==|<|>",
          "name": "keyword.operator.comparison.jome"
        },
        {
          "match": "!",
          "name": "keyword.operator.logical.unary.jome"
        },
        {
          "match": "\\?\\?",
          "name": "keyword.operator.nullish-coalescing.jome"
        },
        {
          "match": "&&",
          "name": "OP_AND"
        },
        {
          "match": "\\|\\|",
          "name": "OP_OR"
        },
        {
          "match": "([a-zA-Z$_][\\w$]*)?(:)\\s*(\\w+)\\s*(=)(?![>=])",
          "captures": {
            "1": {
              "name": "variable.assignment.jome"
            },
            "2": {
              "name": "keyword.operator.type.annotation.jome"
            },
            "3": {
              "name": "TYPE"
            },
            "4": {
              "name": "ASSIGN"
            }
          }
        },
        {
          "match": "([a-zA-Z$_][\\w$]*)?\\s*(=)(?![>=])",
          "captures": {
            "1": {
              "name": "variable.assignment.jome"
            },
            "2": {
              "name": "ASSIGN"
            }
          }
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.jome"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.jome"
        },
        {
          "match": "\\.\\.\\.",
          "name": "keyword.operator.splat.jome"
        },
        {
          "match": "\\?",
          "name": "keyword.operator.existential.jome"
        },
        {
          "match": ":",
          "name": "keyword.operator.colon.jome"
        },
        {
          "match": "\\*|/|-|\\+|\\^",
          "name": "keyword.operator.jome"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.multi.jome",
          "patterns": [
            {
              "include": "#escape-char"
            }
          ],
          "begin": "'''",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.jome"
            }
          },
          "end": "'''",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.jome"
            }
          }
        },
        {
          "name": "string.quoted.single.jome",
          "patterns": [
            {
              "include": "#escape-char"
            }
          ],
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.jome"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.jome"
            }
          }
        },
        {
          "name": "string.quoted.backtick.jome",
          "patterns": [
            {
              "include": "#escape-char"
            }
          ],
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.jome"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.jome"
            }
          }
        },
        {
          "name": "string.quoted.multi.jome",
          "patterns": [
            {
              "include": "#escape-char"
            },
            {
              "begin": "\\{\\{",
              "end": "\\}\\}",
              "patterns": [
                {
                  "include": "#expression"
                }
              ],
              "name": "TEMPLATE_LITERAL"
            }
          ],
          "begin": "\"\"\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.jome"
            }
          },
          "end": "\"\"\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.jome"
            }
          }
        },
        {
          "name": "string.quoted.double.jome",
          "patterns": [
            {
              "include": "#escape-char"
            },
            {
              "begin": "\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "#expression"
                }
              ],
              "name": "TEMPLATE_LITERAL"
            }
          ],
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.jome"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.jome"
            }
          }
        },
        {
          "name": "string.quoted.verbatim.jome",
          "begin": "@(\"|'|\"\"\"|''')",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.jome"
            }
          },
          "end": "\\1",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.jome"
            }
          }
        }
      ]
    },
    "escape-char": {
      "name": "constant.character.escape.jome",
      "match": "\\\\."
    },
    "paren-expression": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.paren.open"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.close"
        }
      },
      "name": "meta.group.jome",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "block-content": {
      "patterns": [
        {
          "match": "(?:^|\\G)(\\s*)([\\p{L}~]\\w*)\\s*:\\s*([\\p{Lu}]\\w*)",
          "captures": {
            "1": {
              "name": "punctuation.whitespace.indent.jome"
            },
            "2": {
              "name": "meta.dictionary-key.jome",
              "patterns": [
                {
                  "match": "([\\p{L}~]\\w*)",
                  "name": "support.type.property-name.jome"
                }
              ]
            },
            "3": {
              "name": "entity.name.type.jome-obj.jome"
            }
          }
        },
        {
          "match": "(?:^|\\G)(\\s*)([\\p{Lu}]\\w*)(?!\\w*(-\\w+)*\\s*:)",
          "captures": {
            "1": {
              "name": "punctuation.whitespace.indent.jome"
            },
            "2": {
              "name": "entity.name.type.jome-obj.jome"
            }
          }
        },
        {
          "match": "(?:^|\\G)(\\s*)([\\p{L}]\\w*)(?!\\w*(-\\w+)*\\s*:)",
          "captures": {
            "1": {
              "name": "punctuation.whitespace.indent.jome"
            },
            "2": {
              "name": "entity.name.function.jome"
            }
          }
        },
        {
          "match": "(?:\\G)\\s+"
        },
        {
          "match": "(?:^|\r\n|\n)\\s+",
          "name": "punctuation.whitespace.indent.jome"
        },
        {
          "match": "\\s+"
        },
        {
          "match": "([\\p{L}~]\\w*(-\\w+)*)\\s*:",
          "name": "meta.dictionary-key.jome",
          "captures": {
            "1": {
              "name": "support.type.property-name.jome"
            }
          }
        },
        {
          "include": "#comma"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "block-array": {
      "begin": "\\{\\[",
      "end": "\\]\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.curly-braces.open"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.curly-braces.close"
        }
      },
      "name": "meta.block-array.jome",
      "patterns": [
        {
          "include": "#block-content"
        }
      ]
    },
    "code_block": {
      "patterns": [
        {
          "begin": "(?<=\\=\\>)\\s*\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "CODE_BLOCK"
        },
        {
          "begin": "(?<=\\))\\s*\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "name": "CODE_BLOCK"
        }
      ]
    },
    "block": {
      "begin": "\\{",
      "end": "\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.curly-braces.open"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.curly-braces.close"
        }
      },
      "name": "meta.block.jome",
      "patterns": [
        {
          "include": "#block-content"
        }
      ]
    },
    "script-params": {
      "patterns": [
        {
          "match": "(\\<)([_:A-Za-z][A-Za-z0-9\\-_\\:.]*)",
          "captures": {
            "1": {
              "name": "punctuation.definition.tag.begin.jome"
            },
            "2": {
              "name": "entity.name.tag.jome"
            }
          }
        },
        {
          "match": "\\s+"
        },
        {
          "name": "meta.script-param-assign.jome",
          "match": "(\\w+)\\s*=\\s*(\"[^\"]*\")",
          "captures": {
            "1": {
              "name": "entity.other.attribute-name.jome"
            },
            "2": {
              "name": "string.quoted.double.jome"
            }
          }
        },
        {
          "match": "\\w+",
          "name": "entity.other.attribute-name.jome"
        },
        {
          "match": ">$",
          "name": "punctuation.definition.tag.end.jome"
        }
      ]
    },
    "for-tag-func": {
      "patterns": [
        {
          "name": "entity.name.function.jome",
          "match": "#?\\w+"
        }
      ]
    },
    "for-tag": {
      "patterns": [
        {
          "name": "meta.forall.jome",
          "begin": "\\b(forall)\\b\\s*([_:A-Za-z][A-Za-z0-9\\-_\\:.]*)?",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.jome"
            },
            "2": {
              "name": "keyword.other.tag-name.jome"
            }
          },
          "end": "\\b(end)\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.jome"
            }
          },
          "patterns": [
            {
              "name": "meta.forall-chain.jome",
              "match": "\\b(chain)\\b\\s*((?:#?\\w+(?:,\\s*#?\\w+)*)?)\\s*",
              "captures": {
                "1": {
                  "name": "keyword.control.jome"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#for-tag-func"
                    }
                  ]
                }
              }
            },
            {
              "name": "meta.forall-wrap.jome",
              "match": "\\b(wrap)\\b\\s*((?:#?\\w+(?:,\\s*#?\\w+)*)?)\\s*",
              "captures": {
                "1": {
                  "name": "keyword.control.jome"
                },
                "2": {
                  "patterns": [
                    {
                      "include": "#for-tag-func"
                    }
                  ]
                }
              }
            }
          ]
        }
      ]
    },
    "tag-end": {
      "match": "(\\<\\/)([_:A-Za-z][A-Za-z0-9\\-_\\:.]*)(\\>)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.begin.jome"
        },
        "2": {
          "name": "entity.name.tag.jome"
        },
        "3": {
          "name": "punctuation.definition.tag.end.jome"
        }
      }
    },
    "tag-literal": {
      "patterns": [
        {
          "name": "meta.string-template-literal.jome",
          "begin": "<%=|<%s|<%-|<%",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.tag-literal.begin.jome"
            }
          },
          "end": "%>",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.tag-literal.end.jome"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        }
      ]
    },
    "tag": {
      "begin": "\\<([_:A-Za-z][A-Za-z0-9\\-_\\:.]*)(\\s+|\\w+|\\w+\\s*=\"[^\"]*\")*\\>",
      "beginCaptures": {
        "0": {
          "patterns": [
            {
              "include": "#script-params"
            }
          ]
        }
      },
      "end": "(\\<\\/)(\\1)(\\>)",
      "endCaptures": {
        "0": {
          "patterns": [
            {
              "include": "#tag-end"
            }
          ]
        }
      },
      "name": "meta.tag.jome",
      "contentName": "raw",
      "patterns": [
        {
          "include": "#tag-literal"
        }
      ]
    },
    "format": {
      "match": "(?<=\"|'|>|\\w)(%:?(:\\#)?\\w+)+",
      "name": "keyword.other.string-format.jome"
    },
    "scripts": {
      "patterns": [
        {
          "begin": "\\<([_:A-Za-z][A-Za-z0-9\\-_\\:.]*?\\.jome|jome)(\\s+|\\w+|\\w+\\s*=\"[^\"]*\")*\\>",
          "end": "\\<\\/\\1\\>",
          "beginCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#script-params"
                }
              ]
            }
          },
          "endCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#tag-end"
                }
              ]
            }
          },
          "name": "meta.tag.jome",
          "contentName": "raw",
          "patterns": [
            {
              "include": "source.jome"
            }
          ]
        },
        {
          "begin": "\\<([_:A-Za-z][A-Za-z0-9\\-_\\:.]*?\\.js|js)(\\s+|\\w+|\\w+\\s*=\"[^\"]*\")*\\>",
          "end": "\\<\\/\\1\\>",
          "beginCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#script-params"
                }
              ]
            }
          },
          "endCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#tag-end"
                }
              ]
            }
          },
          "name": "meta.tag.jome",
          "contentName": "raw",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        },
        {
          "begin": "\\<([_:A-Za-z][A-Za-z0-9\\-_\\:.]*?\\.md|md)(\\s+|\\w+|\\w+\\s*=\"[^\"]*\")*\\>",
          "end": "\\<\\/\\1\\>",
          "beginCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#script-params"
                }
              ]
            }
          },
          "endCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#tag-end"
                }
              ]
            }
          },
          "name": "meta.tag.jome",
          "contentName": "raw",
          "patterns": [
            {
              "include": "text.html.markdown"
            }
          ]
        },
        {
          "begin": "\\<([_:A-Za-z][A-Za-z0-9\\-_\\:.]*?\\.sh|sh)(\\s+|\\w+|\\w+\\s*=\"[^\"]*\")*\\>",
          "end": "\\<\\/\\1\\>",
          "beginCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#script-params"
                }
              ]
            }
          },
          "endCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#tag-end"
                }
              ]
            }
          },
          "name": "meta.tag.jome",
          "contentName": "raw",
          "patterns": [
            {
              "include": "source.shell"
            }
          ]
        },
        {
          "begin": "\\<([_:A-Za-z][A-Za-z0-9\\-_\\:.]*?\\.css|css)(\\s+|\\w+|\\w+\\s*=\"[^\"]*\")*\\>",
          "end": "\\<\\/\\1\\>",
          "beginCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#script-params"
                }
              ]
            }
          },
          "endCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#tag-end"
                }
              ]
            }
          },
          "name": "meta.tag.jome",
          "contentName": "raw",
          "patterns": [
            {
              "include": "source.css"
            }
          ]
        },
        {
          "begin": "\\<([_:A-Za-z][A-Za-z0-9\\-_\\:.]*?\\.html|html)(\\s+|\\w+|\\w+\\s*=\"[^\"]*\")*\\>",
          "end": "\\<\\/\\1\\>",
          "beginCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#script-params"
                }
              ]
            }
          },
          "endCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#tag-end"
                }
              ]
            }
          },
          "name": "meta.tag.jome",
          "contentName": "raw",
          "patterns": [
            {
              "include": "text.html.derivative"
            }
          ]
        },
        {
          "begin": "\\<([_:A-Za-z][A-Za-z0-9\\-_\\:.]*?\\.HTML|HTML)(\\s+|\\w+|\\w+\\s*=\"[^\"]*\")*\\>",
          "end": "\\<\\/\\1\\>",
          "beginCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#script-params"
                }
              ]
            }
          },
          "endCaptures": {
            "0": {
              "patterns": [
                {
                  "include": "#tag-end"
                }
              ]
            }
          },
          "name": "meta.tag.jome",
          "contentName": "raw",
          "patterns": [
            {
              "include": "text.html.derivative"
            }
          ]
        }
      ]
    },
    "square-bracket": {
      "name": "meta.square-bracket.jome",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.square-bracket.begin.jome"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.square-bracket.end.jome"
        }
      },
      "patterns": [
        {
          "match": "(?<!\\.)\\.{3}",
          "name": "keyword.operator.slice.exclusive.jome"
        },
        {
          "match": "(?<!\\.)\\.{2}",
          "name": "keyword.operator.slice.inclusive.jome"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "match": "([+-]?\\d+\\.\\d+)(([a-zA-Z%])+(•[a-zA-Z]+)*(\\/[a-zA-Z]+)*)",
          "captures": {
            "1": {
              "name": "constant.numeric.float.jome"
            },
            "2": {
              "name": "support.constant.unit.jome"
            }
          },
          "name": "meta.number-with-unit.jome"
        },
        {
          "match": "[+-]?\\d+\\.\\d+",
          "name": "constant.numeric.float.jome"
        },
        {
          "match": "([+-]?\\d+)(([a-zA-Z%])+(•[a-zA-Z]+)*(\\/[a-zA-Z]+)*)",
          "captures": {
            "1": {
              "name": "constant.numeric.integer.jome"
            },
            "2": {
              "name": "support.constant.unit.jome"
            }
          },
          "name": "meta.number-with-unit.jome"
        },
        {
          "match": "\\b(0|(0[dD]\\d|[1-9])(?>_?\\d)*)r?i?\\b",
          "name": "constant.numeric.integer.jome"
        },
        {
          "name": "constant.language.jome",
          "match": "\\b(null|undefined)\\b"
        },
        {
          "name": "constant.language.boolean.jome",
          "match": "\\b(true)\\b"
        },
        {
          "name": "constant.language.boolean.jome",
          "match": "\\b(false)\\b"
        },
        {
          "name": "variable.language.jome",
          "match": "\\b(PARAMS)\\b"
        }
      ]
    },
    "block-comment": {
      "patterns": [
        {
          "begin": "\\/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.jome"
            }
          },
          "end": "\\*\\/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.jome"
            }
          },
          "name": "comment.block.jome"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "match": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?).*(?:\r\n|\n|$)",
          "name": "comment.line.double-slash.jome"
        },
        {
          "begin": "# ",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.jome"
            }
          },
          "end": "$\\n?",
          "name": "comment.line.documentation.jome"
        },
        {
          "begin": "\\/\\*\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.jome"
            }
          },
          "end": "\\*\\/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.jome"
            }
          },
          "name": "comment.block.documentation.jome"
        },
        {
          "include": "#block-comment"
        }
      ]
    },
    "regex": {
      "patterns": [
        {
          "name": "string.regexp.js",
          "begin": "(?<!\\+\\+|--|})(?<=[=(:,\\[?+!]|^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case|=>|&&|\\|\\||\\*\\/)\\s*(\\/)(?![\\/*])(?=(?:[^\\/\\\\\\[\\()]|\\\\.|\\[([^\\]\\\\]|\\\\.)+\\]|\\(([^\\)\\\\]|\\\\.)+\\))+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.string.begin.js"
            }
          },
          "end": "(/)([dgimsuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js"
            },
            "2": {
              "name": "keyword.other.js"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "string.regexp.js",
          "begin": "((?<![_$[:alnum:])\\]]|\\+\\+|--|}|\\*\\/)|((?<=^return|[^\\._$[:alnum:]]return|^case|[^\\._$[:alnum:]]case))\\s*)\\/(?![\\/*])(?=(?:[^\\/\\\\\\[]|\\\\.|\\[([^\\]\\\\]|\\\\.)*\\])+\\/([dgimsuy]+|(?![\\/\\*])|(?=\\/\\*))(?!\\s*[a-zA-Z0-9_$]))",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.js"
            }
          },
          "end": "(/)([dgimsuy]*)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.js"
            },
            "2": {
              "name": "keyword.other.js"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        }
      ]
    },
    "regexp": {
      "patterns": [
        {
          "name": "keyword.control.anchor.regexp",
          "match": "\\\\[bB]|\\^|\\$"
        },
        {
          "match": "\\\\[1-9]\\d*|\\\\k<([a-zA-Z_$][\\w$]*)>",
          "captures": {
            "0": {
              "name": "keyword.other.back-reference.regexp"
            },
            "1": {
              "name": "variable.other.regexp"
            }
          }
        },
        {
          "name": "keyword.operator.quantifier.regexp",
          "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??"
        },
        {
          "name": "keyword.operator.or.regexp",
          "match": "\\|"
        },
        {
          "name": "meta.group.assertion.regexp",
          "begin": "(\\()((\\?=)|(\\?!)|(\\?<=)|(\\?<!))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            },
            "2": {
              "name": "punctuation.definition.group.assertion.regexp"
            },
            "3": {
              "name": "meta.assertion.look-ahead.regexp"
            },
            "4": {
              "name": "meta.assertion.negative-look-ahead.regexp"
            },
            "5": {
              "name": "meta.assertion.look-behind.regexp"
            },
            "6": {
              "name": "meta.assertion.negative-look-behind.regexp"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "meta.group.regexp",
          "begin": "\\((?:(\\?:)|(?:\\?<([a-zA-Z_$][\\w$]*)>))?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            },
            "1": {
              "name": "punctuation.definition.group.no-capture.regexp"
            },
            "2": {
              "name": "variable.other.regexp"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.group.regexp"
            }
          },
          "patterns": [
            {
              "include": "#regexp"
            }
          ]
        },
        {
          "name": "constant.other.character-class.set.regexp",
          "begin": "(\\[)(\\^)?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            },
            "2": {
              "name": "keyword.operator.negation.regexp"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.character-class.regexp"
            }
          },
          "patterns": [
            {
              "name": "constant.other.character-class.range.regexp",
              "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
              "captures": {
                "1": {
                  "name": "constant.character.numeric.regexp"
                },
                "2": {
                  "name": "constant.character.control.regexp"
                },
                "3": {
                  "name": "constant.character.escape.backslash.regexp"
                },
                "4": {
                  "name": "constant.character.numeric.regexp"
                },
                "5": {
                  "name": "constant.character.control.regexp"
                },
                "6": {
                  "name": "constant.character.escape.backslash.regexp"
                }
              }
            },
            {
              "include": "#regex-character-class"
            }
          ]
        },
        {
          "include": "#regex-character-class"
        }
      ]
    },
    "regex-character-class": {
      "patterns": [
        {
          "name": "constant.other.character-class.regexp",
          "match": "\\\\[wWsSdDtrnvf]|\\."
        },
        {
          "name": "constant.character.numeric.regexp",
          "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})"
        },
        {
          "name": "constant.character.control.regexp",
          "match": "\\\\c[A-Z]"
        },
        {
          "name": "constant.character.escape.backslash.regexp",
          "match": "\\\\."
        }
      ]
    }
  }
}